<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Good Young</title>
        <link>https://goodyoung.github.io/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Apr 2024 13:53:37 &#43;0900</lastBuildDate>
            <atom:link href="https://goodyoung.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>[DL]Image Segmentation 2</title>
    <link>https://goodyoung.github.io/posts/blog-construct/segmentation-2/</link>
    <pubDate>Tue, 02 Apr 2024 13:53:37 &#43;0900</pubDate>
    <author>GoodYoung</author>
    <guid>https://goodyoung.github.io/posts/blog-construct/segmentation-2/</guid>
    <description><![CDATA[개요 이전 segmentation 관련 글에 대해 조사를 해보니 segmentation을 위한 다양한(전통적인) 이미지 방법론(전처리)이 많은 사실을 알게 되었다. 따라서 이에 대해 정리를 해보려고 한다. Image segmentation은 접근 방법에 따라 3가지로 나뉜다. 픽셀 기반 방법 thresholding에 기반한 방식으로 threshold에 따라 픽셀 별로 이진화를 할 때 많이 사용한다. 전역, 지역으로 적용하는 영역에 따른 구분도 가능하고, 적응적, 고정 방식으로 경계값을 설정하는 방식으로도 구분 가능하다. Thresholding 방식 등이 있다. Edge 기반 방법 Edge를 추출하는 필터 등을 사용하여 영상으로부터 경계를 추출하는 방법이다. Edge Detection 방법 등이 있다. 영역 기반 방법 위 두 방식은 데이터 noise에 민감하다. 영역 기반 방법은 동질성에 기반하여 다른 데이터 보다 의미있는 영역으로 나누는데 적합하지만 동질성을 규정하는 rule을 어떻게 정할 것인가는 문제이다. region growing, region merging 방법 등이 있다. 따라서 Image segmentation의 기본적인 방법론 픽셀 기반 방법에 대해 설명하고자 한다. Thresholding 영상 처리에서 Thresholding은 영상(Image)을 분할하는 가장 간단한 방법이다. Thresholding은 말 그대로 특정 임계값을 정하고 그보다 작으면 0, 크면 1로 이진화를 하는 간단한 방법이다. T(Threshold)가 한개만 적용한 경우
T(Threshold)가 두개 적용한 경우
그럼 T의 값은 어떻게 결정할까? 다음으로 T의 값을 설정하는 3가지 방법에 대해서 알아볼 것이다. Global Thresholding 첫번째 방법으로는 Global Thresholding 방법이 있다. 이 방법은 영상 픽셀값의 누적 분포를 알 수 있는 히스토그램을 사용한다.
히스토그램의 peak(정점)의 분포를 확인하여 적절한 임계값을 찾아내는 방식이다. 아래는 임계값을 찾는 예시이다. [그림 1] Gray Scale Image [그림 1]을 보면 Gray Image가 있는 것을 확인 할 수 있다. 우리는 이 Image의 픽셀을 히스토그램으로 시각화 하여 peak를 찾을 것이다. [그림 2] Gray Scale Image Histogram [그림 2]를 보게 되면 [그림 1]의 픽셀을 빈도수 별로 나누어 히스토그램을 그린 것 이다. Peak가 크게 2개 있는 것을 확인이 가능하고 우리는 그 사이 값으로 임계값을 설정하면 된다. [그림 3] Final Image [그림 3]은 임계값을 225으로 잡고 Thresholding을 적용시킨 Image이다. 영상속 모양을 가진 물체들을 잘 탐지한 것을 볼 수 있게 된다.
관련 코드는 GITHUB에 있다. Otsu Thresholding 두번째 방법으로는 Otsu Thresholding 방법이 있다. 이 방법은 peak의 경계가 명확하지 않고, peak 근처에 데이터가 몰려있지 않은 경우, 즉 히스토그램만 분석해서 잘 안나오는 영상에 대해서 최적의 T를 결정하는 방법이다. Otsu Thresholding방법은 오츠의 이진화 알고리즘을 이용하여 자동으로 T의 값을 찾는 방법으로 알려져있다. 영상에서 임의의 T값을 기준으로 하여 T보다 작은 픽셀 (T보다 어두운 픽셀)과 T와 같거나 큰 픽셀을 각각 다른 2개의 그룹으로 나누어 각각의 평균과 표준편차를 구한다. Otsu Thresholding은 2개 그룹 사이의 그룹 내 분산을 최소화 하거나 혹은 그룹 간 분산을 최대로 하는 방향으로 T를 정하면, 가장 적절한 임계값을 자동으로 얻을 수 있게 된다. 왜냐하면 그룹 내로는 비슷한 분포를(분산 최소) 보이고, 그룹 간으로 다른 성격을 띄는(분산이 최대) 분포를 보이면 그 T값이 우리가 위에서(Thresholding) 정한 histogram에서 peak을 보고 T를 정한 것이랑 같기 때문이다. 위 그림을 Otsu Thresholding을 사용하여 처리하는 과정을 나타낸 예시이다.
[그림 4] Otsu Thresholding Histogram 16. 원본 그림의 픽셀 분포를 나타낸 것이며, Otsu Thresholding을 통해 가장 적절한 T의 값을 찾은 것이다. [그림 4]에 있는 그래프를 봤을 때 Thresholding방식으로 바로 적절한 T의 값을 찾기란 번거로웠을 것이다. [그림 5] Otsu Thresholding Output [그림 5]는 T값을 기준으로 이진 변환을 한 결과이다. 관련 코드는 GITHUB에 있다.
Thresholding이나 Otsu Thresholding방식은 전역 임계값을 사용한 것이다. 전역 임계값은 단순성과 효율성에서 이점이 있지만 조명이나 특정 noise, pixel 분포가 복잡한 영상에 상당한 변화가 있는 영상에는 적합하지 않을 수도 있다.]]></description>
</item>
<item>
    <title>[DL] Image Segmentation</title>
    <link>https://goodyoung.github.io/posts/blog-construct/segmentation/</link>
    <pubDate>Wed, 20 Mar 2024 22:03:00 &#43;0900</pubDate>
    <author>GoodYoung</author>
    <guid>https://goodyoung.github.io/posts/blog-construct/segmentation/</guid>
    <description><![CDATA[개요 컴퓨터 비전(Computer Vision)의 분야에 있어서 대표적인 기술은 객체 분류(Object Classification), 객체 탐지 및 위치 식별(Object Detection &amp; Localization), 객체 분할 (Object Segmentation), 이미지 캡셔닝(Image captioning)등이 있다. 이런 다양한 기술 중 하나인 이미지 분할(Image Segmentation)에 대해서 설명하고자 한다. 이미지 분할(Image Segmentation) [그림 1] Image Segmentation의 예 이미지 분할(Image Segmentation)은 신경망을 훈련시켜 이미지를 픽셀 단위로 분할하는 것이다. 위의 그림과 같이 이미지를 분할하게 되면 각각의 픽셀을 라벨(범주)별로 분류하는 작업을 거치게 된다. 이미지 분할(Image Segmentation)은 이미지 탐지(Image Detection)과는 다른 문제이다. 위의 그림 처럼 사람(Person)이라는 라벨을 가진 이미지에서도 여러 사람들을 분류 하는 것이 이미지 탐지(Image Detection)이다. 이미지 분할(Image Segmentation)은 여러 사람들을 사람이라는 하나의 객체(라벨) 안에 각각 다른 하나의 객체로 구분한다. 다음으론 이런 이미지 분할(Image Segmentation)도 Semantic Segmentation, Instance Segmentation, Panoptic Segmentation등 다양한 종류가 존재하는데 이에 대해 설명하고자 한다. 의미적 분할(Semantic Segmentation) [그림 2] Sementic Segmentation의 예 의미적 분할은 Semantic: '의미론'의 단어 뜻 처럼 이미지 내에 있는 객체들을 의미있는 단위로 분할하는 것을 말한다. 이미지를 봤을 때 큰 의미로 분할을 하게 된다. (위의 예시로 보자면 큰 객체들 위주: 사람, 자전거, 배경) 하지만 의미적 분할은 큰 의미로만 분할을 하지 하나의 객체 안에서 개별 객체로 구분하지는 않는다.(이미지에서 다른 사람이더라도 상관없이 같은 라벨로 표현) 따라서 이를 보완하기 위해 나타난 것이 인스턴스 분할(Instance Segmentation) 이다. 인스턴스 분할(Instance Segmentation) [그림 3] Instance Segmentation의 예 인스턴스 분할은 객체별로 각각 다른 라벨을 가지게 한다. 또한 각 객체의 경계 또한 식별이 가능하게 된다. 인스턴스 분할은 의미적 분할처럼 각 픽셀별로 어떤 카테고리에 속하는지 계산하는 것이 아닌 각 픽셀별로 object가 있는지 없는지 여부만 계산한다.
2-stage detector(Mask R-CNN)에서 객체들을 bounding box를 통해 localization을 시킨다. 그 후 localize된 RoI마다 class의 개수 만큼 binary mask(instance인지 아닌지) 마스크를 씌워준다. RoI별로 class 개수만큼 output 채널이 존재하고 동일 class더라도 서로다른 객체(instance)로 판별. (-&gt; 객체 별 각각 다른 객체) 즉, RoI가 focus하는 객체(instance)부분만 value를 갖도록 한다. 용어 설명 2-stage detector: localization과 classification이 순차적으로 이루어지는 방식 Localization: 객체 주변의 bounding box를 식별하여 객체의 위치를 찾는 방식 RoI: 관심 영역, 이미지 상에서 관심 있는 영역
따라서 인스턴스 분할은 background와 같이 구분하기 애매한 것들은 제외시키고 object를 대상으로 한다. 파놉틱 분할(Panoptic Segmentation) [그림 4] Panoptic Segmentation의 예 파놉틱 분할은 위 두가지 방법인 의미적, 인스턴스 분할을 합친 개념이다. 즉, 모든 pixel에 대해 라벨을 분류하고 객체 별 각각 다른 객체로 판별하는 과정을 수행하는 것이다. Image Segmentation 활용 분야 의학 사진(Medical Image)에서 많이 활용되고 있다. 예를 들어 환자의 체내 이미지에서 다양한 질병을 감지하는데 사용되고 있다. [그림 5] Image Segmentation의 활용 예-1 자율 주행 자동차처럼 자기 스스로 이미지를 분석하여 움직이는 것들은 이미지 분할의 도움을 받을 수 있게 된다. [그림 5] Image Segmentation의 활용 예-2 Reference https://velog.io/@dongho5041/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98Image-Segmentation https://velog.io/@lighthouse97/%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98Image-Segmentation https://velog.io/@claude_ssim/%EC%8B%9C%EA%B0%81%EC%A7%80%EB%8A%A5-Instance-segmentation https://ganghee-lee.tistory.com/44 https://ganghee-lee.tistory.com/34 ]]></description>
</item>
<item>
    <title>Hugo 블로그 구축기 -2 With Mac</title>
    <link>https://goodyoung.github.io/posts/blog-construct/hugo_blog_2/</link>
    <pubDate>Tue, 05 Mar 2024 20:42:00 &#43;0900</pubDate>
    <author>GoodYoung</author>
    <guid>https://goodyoung.github.io/posts/blog-construct/hugo_blog_2/</guid>
    <description><![CDATA[개요 Hugo 블로그 구축기 -1에서 블로그 기본적인 토대를 만들었다면 해당 글에선 본격적으로 블로그를 내 입맛에 맞게 꾸미려고 한다. 그 방법으로 hugo.toml 변경, shell을 이용한 git update 자동화 방법을 소개하려고 한다. Step 1: 구성 파일 변경 hugo에서는 블로그 구성 파일을 hugo.toml로 관리를 하게 된다. 여기서 블로그 구성 파일이란 블로그 웹의 기본 설정(메뉴 설정, 테마, 포스트 및 페이지 등)을 구성할 수 있게 하는 파일이다. 이제 hugo.toml을 Vim 편집기를 사용하여 수정하려고 한다.
$ cd my_blog # 생성 폴더로 이동 $ vi hugo.toml # vim 편집기로 구성 파일 편집 자신이 정한 테마의 Github에 config.toml or hugo.toml에 가이드라인을 보고 참고하여 추가하면 된다. 테마의 Github에 내용이 없거나, 좀 어려운 경우는 자신의 테마의 Github이 아니라 자신이 정한 테마를 사용한 블로그를 운영하는 사람의 github.io 레포지토리를 들어가서 파일을 참고하는 방법도 추천한다. Step 2: 배포 파일 설정 Hugo 블로그 구축기 -1 Step 3에서 배포 파일을 담을 레포지토리 하나만 관리하게 구성하였다고 하였다. 레포지토리가 하나라고 해도 블로그의 변경사항을 Github Pages에 적용하려면 은근히 직접 치기 귀찮다. 따라서 수정 사항을 한 번에 Github에 올릴 수 있는 배포 파일을 만들 것 이다. # 기존 배포 시 실행 코드 $ hugo $ cd public $ git add . $ git commit -m &#34;Update: {commit message}&#34; $ git push origin master $ cd .. 리눅스 쉘 스크립트를 활용하여 배포 파일을 만들면 된다. $ cd my_blog # 생성 폴더로 이동 $ touch deploy.sh # 배포 쉘 스크립트 파일 생성 $ chmod 777 deploy.sh # 파일 실행 권한 부여 배포 파일을 만들었으면 스크립트를 작성하면 된다. $ #!/bin/bash $ echo -e &#34;\033[0;32mDeploying updates to GitHub...\033[0m&#34; # Build the project. $ hugo -t loveit # hugo -t &lt;여러분의 테마&gt; # Go To Public folder, sub module commit $ cd public # Add changes to git. $ git add . # Commit changes. $ msg=&#34;rebuilding site `date +%y-%m-%d`&#34; $ if [ $# -eq 1 ] # 호출 시 인자를 하나 받았는지 아닌지 $ then msg=&#34;$1&#34; $ fi $ git commit -m &#34;$msg&#34; # Push source and build repos. $ git push origin master # Come Back up to the Project Root $ cd .. $ echo &#34;Finish blog deploy...&#34; 해당 배포 파일은 돌아다니는 레퍼런스를 참고하여 만들었다. 하지만 우린 하나의 레포지토리만 사용하므로 public 폴더로 이동 후 한 번만 push하도록 수정했다. 마지막으로 배포 파일을 실행 하려면 아래와 같은 코드로 실행 하면 된다. $ ./deploy.sh &#34;{commit msg}&#34; # 메세지가 없어도 된다. Reference https://minyeamer.github.io/blog/hugo-blog-1/ ]]></description>
</item>
<item>
    <title>Hugo 블로그 구축기 -1 With Mac</title>
    <link>https://goodyoung.github.io/posts/blog-construct/hugo_blog_1/</link>
    <pubDate>Mon, 04 Mar 2024 13:57:13 &#43;0900</pubDate>
    <author>GoodYoung</author>
    <guid>https://goodyoung.github.io/posts/blog-construct/hugo_blog_1/</guid>
    <description><![CDATA[개요 맥북 유저인 내가 공부 자료 정리를 위해 깃헙 블로그를 구축하려고 한다. 깃헙 블로그로 Hugo를 선택한 이유는 큰 이유 없이 다른 static site generator들 보다 가장 빌딩 시간이 빠른 프레임워크이기 때문이다. Step 1: 기본 구축 Hugo 설치를 위하여 brew를 이용하여 설치를 했다.
블로그 파일들을 로컬 컴퓨터에서 관리를 하기 위해 맥북에 Hugo를 설치를 했다.
$ brew install hugo $ hugo help # hugo 설치가 잘 되었는지 확인 brew가 없다면 공식 문서를 통해 설치를 한 후 실행 한다.
또한 블로그 구축을 위해 GitHub 레포지토리가 있어야 한다. 다음으로 레포지토리를 만들어보겠다.
Github Pages를 사용하기 위해 레포지토리 이름은 username.github.io로 해야한다. 본인의 username을 모르겠다면 본인 깃헙을 들어갔을 때 github.com 뒤에 있는 인자가 본인의 username이라고 생각하면 쉽다. 예를 들어 나의 경우 url이 https://github.com/goodyoung 인데 나의 username은 goodyoung이 되는 것이다. 구축이 어렵다면 공식 문서를 통해 구축하는 것을 추천 한다.
Step 2: Hugo Site 구축 Hugo 명령어를 사용해 Site 구축을 한다. $ hugo new site my_blog # my_blog라는 폴더가 생성이 된다. 자신이 원하는 블로그의 테마를 추가한다.
$ cd my_blog # 생성 폴더로 이동 $ git init # 깃 초기화 $ git submodule add {theme github link} themes/{theme name} # 테마 가져오기 $ echo &#34;theme = &#39;{theme name}&#39;&#34; &gt;&gt; hugo.toml # config 파일 수정 해당 명령어를 작성하면 themes 폴더 안에 테마 폴더가 생성이 된 것을 확인 할 수 있게 된다. 블로그의 여러 테마는 공식 사이트에서 찾을 수 있다.
임시로 로컬에서 사이트 실행을 해본다. $ hugo server 원하는 테마가 나오면 성공이다. 블로그 글 작성 후 업로드 시켜서 확인해본다.
$ hugo new content posts/{post name}.md $ vi posts/{post name}.md Hugo 명렁어로 블로그 포스트를 생성 시킨다. vim 편집기로 해당 블로그 포스트에 대한 내용을 수정한다. +++ title = &#39;My First Post&#39; date = 2024-01-14T07:07:07+01:00 draft = true +++ 잘 실행했다면 위의 형태로 나온다. draft가 default로 true로 되어있다. 하지만 Hugo는 draft가 true인 게시물을 빌딩 시 제외 시킨다. 따라서 Step 3: 배포 단계를 실행할 때 주의하면 된다. 글을 배포를 하고 싶으면 draft 줄을 삭제하던가 false로 바꾸면 된다. 수정 내용을 확인 하기 위해 서버를 재가동을 한다. (두개 중 하나만 실행해도 된다.)
$ hugo server --buildDrafts $ hugo server -D 인자 --buildDrafts나 -D는 초안 상태의 페이지를 보여주는 옵션이다. Step 3: 배포 해당 사이트를 정적 웹페이지로 변환을 하기 위해 다음의 명령을 실행시켜야한다.
$ hugo # site 경로로 간 다음 실행 해당 명령을 실행하면 public 폴더에 정적 페이지들이 자동적으로 생성이 된다. 테마 별 실행 하고 싶다면 hugo -t {theme name} 빌딩 파일 업로드를 위한 깃헙 레포지토리랑 연결을 해야한다.
다른 레퍼런스들의 대부분은 레포지토리를(소스파일 | 배포파일) 두개를 만들고 push를 두번하는 방식을 선택하고 있다. 난 그런 것이 복잡하여 배포파일만(public) github에 올리는 방식으로 했다. $ cd public # public 폴더로 이동 $ git init # git 초기화 $ git remote add origin {github repo} # 4번에서 만든 github 레포지토리 $ git remote -v # 연결 확인 연결이 되었다면 깃에 올리고 확인 해보면 된다. $ git add . $ git commit -m &#34;Update: first commit:&#34; $ git push origin master # master 브랜치로 푸시 (변경해도 무관하다.) 푸시를 하면 master 브랜치가 생성이 된다. 사이트 배포를 위한 마지막 단계로 자신의 레포지토리 깃헙 설정만 하면 배포가 완료 된다. 레포지토리 Settings &gt; General &gt; Default branch로 이동을 한다. 깃헙 default branch 변경 main 브랜치를 master 브랜치로 변경 Settings &gt; Pages &gt; Build and deployment로 이동을 한다.]]></description>
</item>
</channel>
</rss>
